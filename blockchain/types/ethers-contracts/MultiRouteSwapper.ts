/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace MultiRouteSwapper {
      
    export type RouteHopStruct = {router: AddressLike, path: AddressLike[]}

    export type RouteHopStructOutput = [router: string, path: string[]] & {router: string, path: string[] }
  
    }

  export interface MultiRouteSwapperInterface extends Interface {
    getFunction(nameOrSignature: "swapExactTokensForTokens"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "MultiRouteSwap"): EventFragment;

    encodeFunctionData(functionFragment: 'swapExactTokensForTokens', values: [MultiRouteSwapper.RouteHopStruct[], BigNumberish, BigNumberish, AddressLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'swapExactTokensForTokens', data: BytesLike): Result;
  }

  
    export namespace MultiRouteSwapEvent {
      export type InputTuple = [user: AddressLike, tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish, amountOut: BigNumberish];
      export type OutputTuple = [user: string, tokenIn: string, tokenOut: string, amountIn: bigint, amountOut: bigint];
      export interface OutputObject {user: string, tokenIn: string, tokenOut: string, amountIn: bigint, amountOut: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MultiRouteSwapper extends BaseContract {
    
    connect(runner?: ContractRunner | null): MultiRouteSwapper;
    waitForDeployment(): Promise<this>;

    interface: MultiRouteSwapperInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    swapExactTokensForTokens: TypedContractMethod<
      [hops: MultiRouteSwapper.RouteHopStruct[], amountIn: BigNumberish, minAmountOut: BigNumberish, recipient: AddressLike, deadline: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'swapExactTokensForTokens'): TypedContractMethod<
      [hops: MultiRouteSwapper.RouteHopStruct[], amountIn: BigNumberish, minAmountOut: BigNumberish, recipient: AddressLike, deadline: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;

    getEvent(key: 'MultiRouteSwap'): TypedContractEvent<MultiRouteSwapEvent.InputTuple, MultiRouteSwapEvent.OutputTuple, MultiRouteSwapEvent.OutputObject>;

    filters: {
      
      'MultiRouteSwap(address,address,address,uint256,uint256)': TypedContractEvent<MultiRouteSwapEvent.InputTuple, MultiRouteSwapEvent.OutputTuple, MultiRouteSwapEvent.OutputObject>;
      MultiRouteSwap: TypedContractEvent<MultiRouteSwapEvent.InputTuple, MultiRouteSwapEvent.OutputTuple, MultiRouteSwapEvent.OutputObject>;
    
    };
  }