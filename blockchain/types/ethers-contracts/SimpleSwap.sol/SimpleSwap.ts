/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface SimpleSwapInterface extends Interface {
    getFunction(nameOrSignature: "WETH" | "factory" | "getAmountOut" | "getPair" | "pairExists" | "swapExactTokensForTokens"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;

    encodeFunctionData(functionFragment: 'WETH', values?: undefined): string;
encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
encodeFunctionData(functionFragment: 'getAmountOut', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getPair', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'pairExists', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'swapExactTokensForTokens', values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]): string;

    decodeFunctionResult(functionFragment: 'WETH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAmountOut', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPair', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pairExists', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'swapExactTokensForTokens', data: BytesLike): Result;
  }

  
    export namespace SwapEvent {
      export type InputTuple = [user: AddressLike, tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish, amountOut: BigNumberish];
      export type OutputTuple = [user: string, tokenIn: string, tokenOut: string, amountIn: bigint, amountOut: bigint];
      export interface OutputObject {user: string, tokenIn: string, tokenOut: string, amountIn: bigint, amountOut: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface SimpleSwap extends BaseContract {
    
    connect(runner?: ContractRunner | null): SimpleSwap;
    waitForDeployment(): Promise<this>;

    interface: SimpleSwapInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    WETH: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    factory: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    getAmountOut: TypedContractMethod<
      [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getPair: TypedContractMethod<
      [tokenA: AddressLike, tokenB: AddressLike, ],
      [string],
      'view'
    >
    

    
    pairExists: TypedContractMethod<
      [tokenA: AddressLike, tokenB: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    swapExactTokensForTokens: TypedContractMethod<
      [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish, minAmountOut: BigNumberish, to: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'WETH'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'factory'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getAmountOut'): TypedContractMethod<
      [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getPair'): TypedContractMethod<
      [tokenA: AddressLike, tokenB: AddressLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'pairExists'): TypedContractMethod<
      [tokenA: AddressLike, tokenB: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'swapExactTokensForTokens'): TypedContractMethod<
      [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish, minAmountOut: BigNumberish, to: AddressLike, ],
      [bigint],
      'nonpayable'
    >;

    getEvent(key: 'Swap'): TypedContractEvent<SwapEvent.InputTuple, SwapEvent.OutputTuple, SwapEvent.OutputObject>;

    filters: {
      
      'Swap(address,address,address,uint256,uint256)': TypedContractEvent<SwapEvent.InputTuple, SwapEvent.OutputTuple, SwapEvent.OutputObject>;
      Swap: TypedContractEvent<SwapEvent.InputTuple, SwapEvent.OutputTuple, SwapEvent.OutputObject>;
    
    };
  }