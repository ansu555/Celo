/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */


import { ethers } from 'ethers'
import { DeployContractOptions, FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from "./index.js";

declare module "@nomicfoundation/hardhat-ethers/types" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
  getContractFactory(name: 'IERC20Minimal', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IERC20Minimal__factory>
getContractFactory(name: 'IUniswapV2Router02', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IUniswapV2Router02__factory>
getContractFactory(name: 'MultiRouteSwapper', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MultiRouteSwapper__factory>
getContractFactory(name: 'IERC20', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IERC20__factory>
getContractFactory(name: 'IUniswapV2Factory', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IUniswapV2Factory__factory>
getContractFactory(name: 'IUniswapV2Pair', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IUniswapV2Pair__factory>
getContractFactory(name: 'SimpleSwap', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.SimpleSwap__factory>
getContractFactory(name: 'TestToken', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.TestToken__factory>
getContractFactory(name: 'UniswapV2ERC20', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.UniswapV2ERC20__factory>
getContractFactory(name: 'UniswapV2Factory', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.UniswapV2Factory__factory>
getContractFactory(name: 'UniswapV2Pair', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.UniswapV2Pair__factory>
getContractFactory(name: 'IERC20', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IERC20__factory>
getContractFactory(name: 'IUniswapV2Callee', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IUniswapV2Callee__factory>
getContractFactory(name: 'IUniswapV2ERC20', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IUniswapV2ERC20__factory>
getContractFactory(name: 'IUniswapV2Factory', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IUniswapV2Factory__factory>
getContractFactory(name: 'IUniswapV2Pair', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IUniswapV2Pair__factory>
getContractFactory(name: 'UniswapV2Router02', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.UniswapV2Router02__factory>
getContractFactory(name: 'WETH9', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.WETH9__factory>
getContractFactory(name: 'IERC20', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IERC20__factory>
getContractFactory(name: 'IUniswapV2Router01', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IUniswapV2Router01__factory>
getContractFactory(name: 'IUniswapV2Router02', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IUniswapV2Router02__factory>
getContractFactory(name: 'IWETH', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IWETH__factory>

  getContractAt(name: 'IERC20Minimal', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IERC20Minimal>
getContractAt(name: 'IUniswapV2Router02', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IUniswapV2Router02>
getContractAt(name: 'MultiRouteSwapper', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MultiRouteSwapper>
getContractAt(name: 'IERC20', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IERC20>
getContractAt(name: 'IUniswapV2Factory', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IUniswapV2Factory>
getContractAt(name: 'IUniswapV2Pair', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IUniswapV2Pair>
getContractAt(name: 'SimpleSwap', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.SimpleSwap>
getContractAt(name: 'TestToken', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.TestToken>
getContractAt(name: 'UniswapV2ERC20', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.UniswapV2ERC20>
getContractAt(name: 'UniswapV2Factory', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.UniswapV2Factory>
getContractAt(name: 'UniswapV2Pair', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.UniswapV2Pair>
getContractAt(name: 'IERC20', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IERC20>
getContractAt(name: 'IUniswapV2Callee', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IUniswapV2Callee>
getContractAt(name: 'IUniswapV2ERC20', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IUniswapV2ERC20>
getContractAt(name: 'IUniswapV2Factory', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IUniswapV2Factory>
getContractAt(name: 'IUniswapV2Pair', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IUniswapV2Pair>
getContractAt(name: 'UniswapV2Router02', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.UniswapV2Router02>
getContractAt(name: 'WETH9', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.WETH9>
getContractAt(name: 'IERC20', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IERC20>
getContractAt(name: 'IUniswapV2Router01', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IUniswapV2Router01>
getContractAt(name: 'IUniswapV2Router02', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IUniswapV2Router02>
getContractAt(name: 'IWETH', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IWETH>

  deployContract(name: 'IERC20Minimal', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC20Minimal>
deployContract(name: 'IUniswapV2Router02', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Router02>
deployContract(name: 'MultiRouteSwapper', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MultiRouteSwapper>
deployContract(name: 'IERC20', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC20>
deployContract(name: 'IUniswapV2Factory', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Factory>
deployContract(name: 'IUniswapV2Pair', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Pair>
deployContract(name: 'SimpleSwap', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.SimpleSwap>
deployContract(name: 'TestToken', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.TestToken>
deployContract(name: 'UniswapV2ERC20', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.UniswapV2ERC20>
deployContract(name: 'UniswapV2Factory', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.UniswapV2Factory>
deployContract(name: 'UniswapV2Pair', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.UniswapV2Pair>
deployContract(name: 'IERC20', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC20>
deployContract(name: 'IUniswapV2Callee', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Callee>
deployContract(name: 'IUniswapV2ERC20', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2ERC20>
deployContract(name: 'IUniswapV2Factory', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Factory>
deployContract(name: 'IUniswapV2Pair', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Pair>
deployContract(name: 'UniswapV2Router02', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.UniswapV2Router02>
deployContract(name: 'WETH9', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.WETH9>
deployContract(name: 'IERC20', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC20>
deployContract(name: 'IUniswapV2Router01', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Router01>
deployContract(name: 'IUniswapV2Router02', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Router02>
deployContract(name: 'IWETH', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IWETH>

  deployContract(name: 'IERC20Minimal', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC20Minimal>
deployContract(name: 'IUniswapV2Router02', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Router02>
deployContract(name: 'MultiRouteSwapper', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MultiRouteSwapper>
deployContract(name: 'IERC20', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC20>
deployContract(name: 'IUniswapV2Factory', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Factory>
deployContract(name: 'IUniswapV2Pair', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Pair>
deployContract(name: 'SimpleSwap', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.SimpleSwap>
deployContract(name: 'TestToken', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.TestToken>
deployContract(name: 'UniswapV2ERC20', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.UniswapV2ERC20>
deployContract(name: 'UniswapV2Factory', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.UniswapV2Factory>
deployContract(name: 'UniswapV2Pair', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.UniswapV2Pair>
deployContract(name: 'IERC20', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC20>
deployContract(name: 'IUniswapV2Callee', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Callee>
deployContract(name: 'IUniswapV2ERC20', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2ERC20>
deployContract(name: 'IUniswapV2Factory', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Factory>
deployContract(name: 'IUniswapV2Pair', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Pair>
deployContract(name: 'UniswapV2Router02', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.UniswapV2Router02>
deployContract(name: 'WETH9', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.WETH9>
deployContract(name: 'IERC20', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC20>
deployContract(name: 'IUniswapV2Router01', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Router01>
deployContract(name: 'IUniswapV2Router02', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Router02>
deployContract(name: 'IWETH', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IWETH>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
  